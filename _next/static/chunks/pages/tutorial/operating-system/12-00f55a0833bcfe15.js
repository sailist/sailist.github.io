(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9694],{3432:function(e,l,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/operating-system/12",function(){return s(4246)}])},4246:function(e,l,s){"use strict";s.r(l);var n=s(1527),i=s(6828),c=s(4579);function t(e){let l=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",code:"code",pre:"pre",span:"span",h2:"h2",h3:"h3",strong:"strong",a:"a",input:"input"},(0,c.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(l.h1,{children:"IO 类型"}),"\n",(0,n.jsx)(l.p,{children:"理解 IO 的类型首先要区分阻塞/非阻塞和同步/异步的概念，这两个是不同层面的分类标准："}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"阻塞式 IO：对 socket 的 IO 请求会一直等待，直到套接字返回数据或错误"}),"\n",(0,n.jsx)(l.li,{children:"非阻塞式 IO：socket 无论是否有数据还是错误都会直接返回"}),"\n",(0,n.jsx)(l.li,{children:"信号驱动式 IO：socket 在有数据/变化时会通过内核发送一个信号（更改内存中某个变量的值）"}),"\n",(0,n.jsx)(l.li,{children:"同步：进程在 IO 过程时一直等待 IO 的完成，如果是阻塞式 IO，那就等待 IO 返回（数据或错误），如果是非阻塞式 IO，那就轮询该 socket，直到 socket 返回的不是空而是数据或错误。"}),"\n",(0,n.jsxs)(l.li,{children:["异步：进程在 IO 过程时还可以做其他的事，而不是等待 IO，直到 IO 过程结束后返回一个信号，此时可以直接用 ",(0,n.jsx)(l.code,{children:"aio_read"})," 获取"]}),"\n"]}),"\n",(0,n.jsx)(l.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(l.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"小乐爱喝茶，废话不说，煮开水。"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"出场人物：小乐，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    1 小乐把水壶放到火上，立等水开。（同步阻塞）"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        ——   小乐觉得自己有点傻"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    2 小乐把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        ——  小乐还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出呜呜~~~~的噪音。"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    3 小乐把响水壶放到火上，立等水开。（异步阻塞）"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        ——  小乐觉得这样傻等意义不大"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    4 小乐把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        ——  小乐觉得自己聪明了。"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"}})})]})}),"\n",(0,n.jsx)(l.h2,{id:"io-多路复用",children:"IO 多路复用"}),"\n",(0,n.jsx)(l.p,{children:"IO 多路复用（IO Multiplexing）是在 socket 之上进行了一层封装，将多个 socket 统一由一个函数（select、poll、epoll）进行管理。"}),"\n",(0,n.jsx)(l.p,{children:"多路复用的生命周期包括："}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"创建复用 fd 和 socket 列表"}),"\n",(0,n.jsx)(l.li,{children:"建立复用 fd 和 socket 列表中每个 fd 的联系"}),"\n",(0,n.jsx)(l.li,{children:"阻塞式或者轮询等待复用 fd 返回信息，根据返回的信息决定要处理 socket 队列中的哪些 fd（或向 socket 列表中添加新的 fd）"}),"\n"]}),"\n",(0,n.jsx)(l.p,{children:"如果说原来的 socket 的伪代码是："}),"\n",(0,n.jsx)(l.pre,{"data-language":"cpp","data-theme":"default",children:(0,n.jsxs)(l.code,{"data-language":"cpp","data-theme":"default",children:[(0,n.jsxs)(l.span,{className:"line",children:[(0,n.jsx)(l.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:" fd;"})]}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-token-comment)"},children:"// create ..."})}),"\n",(0,n.jsxs)(l.span,{className:"line",children:[(0,n.jsx)(l.span,{style:{color:"var(--shiki-token-function)"},children:"read"}),(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"(fd"}),(0,n.jsx)(l.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:" buf);"})]})]})}),"\n",(0,n.jsx)(l.p,{children:"那么用了复用函数后的伪代码就变成了："}),"\n",(0,n.jsx)(l.pre,{"data-language":"c++","data-theme":"default",children:(0,n.jsxs)(l.code,{"data-language":"c++","data-theme":"default",children:[(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"struct multiplex_data fd[N]; // 用于多路复用的 socket 数据存储区域，除了 socket 的 fd，还保存有状态等信息"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"int listenfd = create();// 创建一个多路复用 socket"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"char buf[M];"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"while(1){"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    n = wait(listenfd, fd); // 返回需要处理的 fd 个数，该函数可以阻塞，也可以是非阻塞的"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    if(n > 0){"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        for(int i = 0;i < n;i++>){"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"            // 处理 fd[i], 如 accept、read、write、close 等"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        }"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    }else if(n < 0){"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"        // ..."})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"    }"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"},children:"}"})}),"\n",(0,n.jsx)(l.span,{className:"line",children:(0,n.jsx)(l.span,{style:{color:"var(--shiki-color-text)"}})})]})}),"\n",(0,n.jsx)(l.p,{children:"多路复用的操作步骤要比直接对 socket 进行 IO 操作增加了额外的许多步骤。所以少量的 socket 连接场景有时用多线程可能会更快一些。当 socket 连接的个数成千上万上百万时，线程的开销会很大，此时使用多路复用，用一个线程就可以实现对所有 socket 的管理，从而显著的减少了服务器的开销。"}),"\n",(0,n.jsx)(l.p,{children:"目前发展处了 select/poll/epoll 三种多路复用的方式。他们主要的区别是："}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"select 函数是阻塞式的，poll 是非阻塞式的，epoll 同时支持阻塞和非阻塞两种方式（仅 LT 模式下支持 block socket）"}),"\n",(0,n.jsx)(l.li,{children:"select/poll 是轮询所有 socket 的，epoll 是基于事件驱动的（所以 epoll 能够撑起更大数量的 socket 连接）"}),"\n",(0,n.jsx)(l.li,{children:"select/poll 管理的文件描述符会在用户和内核两个内存空间中反复拷贝，epoll 通过 mmap 在用户和内核空间共享一块内存"}),"\n",(0,n.jsx)(l.li,{children:"epoll 是 Linux 独有"}),"\n",(0,n.jsx)(l.li,{children:"select/poll 只提供了一个函数（等待 socket），epoll 提供了三个函数（创建句柄、注册回调事件、等待事件）"}),"\n"]}),"\n",(0,n.jsx)(l.h3,{id:"epoll-的性能不一定更高",children:"epoll 的性能不一定更高"}),"\n",(0,n.jsx)(l.p,{children:"当 socket 队列中所有 socket 都活跃时，select/poll （基于轮询的方式）可能比 epoll 的性能更好（因为回调函数调用更麻烦）"}),"\n",(0,n.jsx)(l.h3,{id:"epoll-的回调方式",children:"epoll 的回调方式"}),"\n",(0,n.jsx)(l.p,{children:"水平触发（level triggered）和边沿触发（edge triggered）是模拟信号中的一种概念，以高电平为 1，低电平为 0，水平触发是只要输出为高电平那就一直保持在触发状态；边沿触发是指有在信号有变动时（高电平转低电平或低电平转高电平）才触发。泛化到多路复用中的含义是："}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"水平触发：只要 socket 有信息，在没被处理时，会一直为有消息未处理的状态（默认是该模式）"}),"\n",(0,n.jsx)(l.li,{children:"边沿触发：只对外通知一次，如果不处理或没处理完下次也不会通知（可以看成是专家模式，需要编写更严格的处理逻辑）"}),"\n"]}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.strong,{children:"水平触发"}),"："]}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"对于读操作只要缓冲内容不为空，LT 模式返回读就绪。"}),"\n",(0,n.jsx)(l.li,{children:"对于写操作只要缓冲区还不满，LT 模式会返回写就绪。"}),"\n"]}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.strong,{children:"边缘触发"}),"："]}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:"对于读操作"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"当缓冲区由不可读变为可读的时候，即缓冲区由空变为不空的时候。"}),"\n",(0,n.jsx)(l.li,{children:"当有新数据到达时，即缓冲区中的待读数据变多的时候。"}),"\n",(0,n.jsxs)(l.li,{children:["当缓冲区有数据可读，且应用进程对相应的描述符进行 ",(0,n.jsx)(l.code,{children:"EPOLL_CTL_MOD"})," 修改 ",(0,n.jsx)(l.code,{children:"EPOLLIN"})," 事件时。"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:"对于写操作"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"当缓冲区由不可写变为可写时。"}),"\n",(0,n.jsx)(l.li,{children:"当有旧数据被发送走，即缓冲区中的内容变少的时候。"}),"\n",(0,n.jsxs)(l.li,{children:["当缓冲区有空间可写，且应用进程对相应的描述符进行 ",(0,n.jsx)(l.code,{children:"EPOLL_CTL_MOD"})," 修改 ",(0,n.jsx)(l.code,{children:"EPOLLOUT"})," 事件时。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(l.h2,{id:"异步-io",children:"异步 IO"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:"[ ]"}),"\n"]}),"\n",(0,n.jsx)(l.h1,{children:"Reference"}),"\n",(0,n.jsxs)(l.ul,{className:"contains-task-list",children:["\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://zhuanlan.zhihu.com/p/115912936",children:"https://zhuanlan.zhihu.com/p/115912936"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://zhuanlan.zhihu.com/p/272891398",children:"https://zhuanlan.zhihu.com/p/272891398"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://www.zhihu.com/question/26943558%EF%BC%88%E5%BC%82%E6%AD%A5IO%EF%BC%89",children:"https://www.zhihu.com/question/26943558（异步IO）"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://blog.csdn.net/liuruiqun/article/details/51162651",children:"https://blog.csdn.net/liuruiqun/article/details/51162651"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://blog.csdn.net/lailaiquququ11/article/details/83066593",children:"https://blog.csdn.net/lailaiquququ11/article/details/83066593"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://blog.csdn.net/leyangjun/article/details/62236241",children:"https://blog.csdn.net/leyangjun/article/details/62236241"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://blog.csdn.net/lihao21/article/details/67631516%EF%BC%88%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91%E5%92%8C%E8%BE%B9%E7%BC%98%E8%A7%A6%E5%8F%91%EF%BC%89",children:"https://blog.csdn.net/lihao21/article/details/67631516（水平触发和边缘触发）"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://blog.csdn.net/weixin_49199646/article/details/112298712%EF%BC%88%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91%E5%92%8C%E8%BE%B9%E7%BC%98%E8%A7%A6%E5%8F%91%EF%BC%89",children:"https://blog.csdn.net/weixin_49199646/article/details/112298712（水平触发和边缘触发）"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://cloud.tencent.com/developer/article/1992988",children:"https://cloud.tencent.com/developer/article/1992988"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://www.cnblogs.com/xcywt/p/8146094.html",children:"https://www.cnblogs.com/xcywt/p/8146094.html"})}),"\n"]}),"\n",(0,n.jsxs)(l.li,{className:"task-list-item",children:["\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.input,{type:"checkbox",disabled:!0})," ",(0,n.jsx)(l.a,{href:"https://www.51cto.com/article/665184.html",children:"https://www.51cto.com/article/665184.html"})]}),"\n"]}),"\n"]})]})}s(3366),l.default=(0,i.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:l}=Object.assign({},(0,c.ah)(),e.components);return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(t,{...e})}):t(e)},pageOpts:{filePath:"pages/tutorial/operating-system/12.md",route:"/tutorial/operating-system/12",frontMatter:{authors:"sailist",date:"2022-10-11",description:"",draft:!1,title:"6.1.IO"},headings:[{depth:1,value:"IO 类型",id:"io-类型"},{depth:2,value:"IO 多路复用",id:"io-多路复用"},{depth:3,value:"epoll 的性能不一定更高",id:"epoll-的性能不一定更高"},{depth:3,value:"epoll 的回调方式",id:"epoll-的回调方式"},{depth:2,value:"异步 IO",id:"异步-io"},{depth:1,value:"Reference",id:"reference"}],title:"6.1.IO"},pageNextRoute:"/tutorial/operating-system/12"})}},function(e){e.O(0,[6828,9774,2888,179],function(){return e(e.s=3432)}),_N_E=e.O()}]);