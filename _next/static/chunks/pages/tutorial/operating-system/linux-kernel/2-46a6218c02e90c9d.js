(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1937],{3282:function(n,e,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/operating-system/linux-kernel/2",function(){return i(1139)}])},1139:function(n,e,i){"use strict";i.r(e);var t=i(1527),s=i(6828),l=i(4579);function r(n){let e=Object.assign({h1:"h1",p:"p",h2:"h2",blockquote:"blockquote",a:"a",ul:"ul",li:"li"},(0,l.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{children:"性能优化"}),"\n",(0,t.jsx)(e.p,{children:"与直接访问物理地址相比，虚拟地址转换的过程无疑额外的增加了时间和空间开销。本节介绍针对这些开销的优化方案。"}),"\n",(0,t.jsx)(e.h2,{id:"多级页表",children:"多级页表"}),"\n",(0,t.jsx)(e.p,{children:"上述介绍的分页操作，页表项最多有 $2^20$ 个，这一数量可以通过多级页表进行优化。将虚拟地址除页偏移外的地址分为 n 部份，第 i 部份为第 i 级页表的页号，第 i 级页号得到 i+1 级页表的页基址，以此类推，直到最后一级页表得到物理块号。以二级页表为例，前 20 位地址可以分为 12+8，这样每个一级页表页表项数量是 $2^12 = 4096$，二级页表页表项是 $2^8 = 256$。"}),"\n",(0,t.jsx)(e.p,{children:"如果只是拆分，那么表示全部的虚拟地址所需要的页表项的数量并没有变少。多级页表和单级页表的不同，在于二级之后的页表不需要在进程创建时全部创建，只需要根据进程的实际需要动态加载，从而减少的大量的空白页表项的开销。"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"此时，一级页表仍然实现了描述全部虚拟地址空间的作用。"}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:["关于各种体系下页表的细节，可以阅读 ",(0,t.jsx)(e.a,{href:"https://zhuanlan.zhihu.com/p/458935522",children:"这篇文章"}),"。"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"页缓存",children:"页缓存"}),"\n",(0,t.jsx)(e.p,{children:"对多级页表转换地址过程中多次访存带来的时间开销，可以通过缓存技术进行优化。和页表相关的缓存包括三部分："}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"TLB（Translation Lookside Buffer）：也称快表，一般看做是 MMU 内部针对页表的专用缓存"}),"\n",(0,t.jsx)(e.li,{children:"paging structure caches：针对多级页表的每一级的缓存"}),"\n",(0,t.jsx)(e.li,{children:"L1/L2 Cache：通用缓存，MMU"}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"有多个描述来形容这一过程：面多了加水/水多了加面，空间换时间和时间换空间，trade-off"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"大页",children:"大页"}),"\n",(0,t.jsx)(e.p,{children:"针对多级页表的时间开销，还可以通过 hugepage 来进行优化，中文叫做大页、巨型页等，指的就是大小远超 4KB 的页。"}),"\n",(0,t.jsx)(e.p,{children:"大页可以显著减少页表数量、减少缓存 miss 率。"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"DPDK 使用了 1GB 的大页内存，这样 DPDK 进程的页表映射只占用一个 TLB 表项，在进程执行过程中杜绝了 TLB miss 情况的发生，保障了性能。"}),"\n"]})]})}i(3366),e.default=(0,s.j)({MDXContent:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(r,{...n})}):r(n)},pageOpts:{filePath:"pages/tutorial/operating-system/linux-kernel/2.md",route:"/tutorial/operating-system/linux-kernel/2",frontMatter:{authors:"sailist",date:"2022-11-23",description:"",draft:!1,title:"1.2.性能优化"},headings:[{depth:1,value:"性能优化",id:"性能优化"},{depth:2,value:"多级页表",id:"多级页表"},{depth:2,value:"页缓存",id:"页缓存"},{depth:2,value:"大页",id:"大页"}],title:"1.2.性能优化"},pageNextRoute:"/tutorial/operating-system/linux-kernel/2"})}},function(n){n.O(0,[6828,9774,2888,179],function(){return n(n.s=3282)}),_N_E=n.O()}]);