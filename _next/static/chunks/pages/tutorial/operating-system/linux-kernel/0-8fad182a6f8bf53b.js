(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6714],{2492:function(s,e,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/operating-system/linux-kernel/0",function(){return r(6929)}])},6929:function(s,e,r){"use strict";r.r(e);var n=r(1527),l=r(6828),i=r(4579);function o(s){let e=Object.assign({h1:"h1",p:"p",blockquote:"blockquote",h2:"h2",strong:"strong",code:"code",ul:"ul",li:"li",h3:"h3",pre:"pre",span:"span",input:"input",img:"img",a:"a"},(0,i.ah)(),s.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:"寻址"}),"\n",(0,n.jsx)(e.p,{children:"寻址并不是寻找地址本身，而是寻找给定内存地址对应的内存数据，为了直观一些可以改叫访存。"}),"\n",(0,n.jsx)(e.p,{children:"访存的基本原理是将要访问的地址通过地址总线输入存储器，在触发后，数据随着数据总线进出存储器。CPU 的所有指令操作可以被分为访存和非访存两种，非访存操作只涉及到 CPU 内部的运算单元和寄存器操作，访存操作则涉及到 CPU 内寄存器到物理内存的读写。"}),"\n",(0,n.jsxs)(e.blockquote,{children:["\n",(0,n.jsx)(e.p,{children:"访存操作整体上包括控制单元对指令地址的读操作、数据单元对数据地址的读写操作"}),"\n"]}),"\n",(0,n.jsx)(e.p,{children:"现代计算机体系结构下的访存操作，大多都离不开分页技术，因此先介绍分页。"}),"\n",(0,n.jsx)(e.h2,{id:"页表",children:"页表"}),"\n",(0,n.jsxs)(e.p,{children:["访存有实模式和保护模式两种。实模式下，CPU 访存请求中的地址是真实的",(0,n.jsx)(e.strong,{children:"物理地址（PA，Physical Address）"}),"，可以直接通过地址总线输入到存储器；而在保护模式下，该地址被称为",(0,n.jsx)(e.strong,{children:"虚拟地址（VA，Virtual Adress）"}),"，需要进一步转换为真实的物理地址。"]}),"\n",(0,n.jsxs)(e.p,{children:["保护模式相比于实模式，可以看成是加了一个中间函数 ",(0,n.jsx)(e.code,{children:"f(VA, flag) = PA"}),"（或字典 ",(0,n.jsx)(e.code,{children:"dic[VA,flag] = PA"}),"），这一函数建立了一个从虚拟地址到物理地址的多对一映射。虚拟地址的优点包括："]}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"每个用户进程的地址都可以从 0 开始"}),"\n",(0,n.jsx)(e.li,{children:"虚拟地址空间可以远远大于物理地址（通过按需调页（demand paging）这种懒加载思想和交换（swap）技术）"}),"\n",(0,n.jsx)(e.li,{children:"在硬件层面上支持对用户访存是否合法的检查"}),"\n",(0,n.jsx)(e.li,{children:"..."}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["这一转换过程在大多数情况下需要去存储 ",(0,n.jsx)(e.code,{children:"VA->PA"})," 这样一个映射关系，为了减少映射关系的存储开销，大多数有虚拟地址支持的系统都采用了",(0,n.jsxs)(e.strong,{children:["分页（paging）",(0,n.jsxs)(e.strong,{children:["技术。假设存储一个 ",(0,n.jsx)(e.code,{children:"VA->PA"})," 的映射关系需要 ",(0,n.jsx)(e.code,{children:"4B=32bit"}),"，4GB 内存为例，如果以 4KB 为单位将内存分块，那么一共能分成 $4GB/4KB = 2^{20}$ 个块。即使用 $2^{20} * 4B = 4MB$大小的内存就可以存储所有的映射关系。在这过程中，分块即是"]}),"分页（paging）"]}),"，",(0,n.jsx)(e.code,{children:"VA->PA"})," 这样的映射关系被称为",(0,n.jsx)(e.strong,{children:"页表项"}),"，而存储",(0,n.jsx)(e.strong,{children:"页表项"}),"数组的数据结构或内存空间被称为",(0,n.jsx)(e.strong,{children:"页表"}),"。"]}),"\n",(0,n.jsxs)(e.p,{children:["每个进程都会有一个页表，此外内核也会分配页表【高端内存和非高端内存是否都有页表？】。页表会随机存放在内核空间中，通过",(0,n.jsx)(e.strong,{children:"页基址"}),"来定位。此外，",(0,n.jsx)(e.strong,{children:"页表必须包含全部的虚拟地址空间"}),"。"]}),"\n",(0,n.jsx)(e.h3,{id:"va-pa",children:"VA->PA"}),"\n",(0,n.jsx)(e.p,{children:"分页技术通过页基址、页号、页偏移三个参数来定位真实物理地址："}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"页基址：用于定位一个页表的初始地址"}),"\n",(0,n.jsxs)(e.li,{children:["页号：用来定位页表中的某个页表项，页表项中存储了物理内存的",(0,n.jsx)(e.strong,{children:"块号"}),"。页号和块号的最大数量等同"]}),"\n",(0,n.jsx)(e.li,{children:"页偏移：用来定位一个页内的具体的某个地址单元"}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["分页过程中，虚拟地址到物理地址的转换过程，实质是将一个地址的前 ",(0,n.jsx)(e.code,{children:"n"})," 位重映射的一个过程。一个物理内存块会分配一个页表项，因此两者的最大数量是相同的，在 4G 内存 4KB 页大小下都是 $2^20$ 个，需要 ",(0,n.jsx)(e.code,{children:"20bit"})," 长度的二进制序列来表示，而页内（也是块内）则有 4KB，即 $4*1024 byte = 2^12B$，因此需要 ",(0,n.jsx)(e.code,{children:"12bit"})," 来表示。因此，32 位的虚拟地址在这种条件下被拆分成 20 位的页号和 12 位的页偏移两部分，其中页号可以通过页表项来映射到物理块号（页帧号，page frame number）。"]}),"\n",(0,n.jsxs)(e.p,{children:["每个进程存放页表的地址并不固定（一定程度上增加了安全系数），该地址由",(0,n.jsx)(e.strong,{children:"页基址"}),"来表示，每个进程唯一确定一个页基址，在切换一个用户进程时，该进程的页基址会由操作系统写入到",(0,n.jsx)(e.strong,{children:"页基址寄存器"}),"中。在该进程访存时，MMU 接受 CPU 发出的虚拟地址，通过页基址寄存器找到该进程的页表，通过虚拟地址的页号部份找到页表项，得到物理块号，最终得到物理地址，实现最后的访存操作。"]}),"\n",(0,n.jsxs)(e.blockquote,{children:["\n",(0,n.jsx)(e.p,{children:"存储页基址的寄存器：X86 体系架构下是控制寄存器 CR3(Control Register 3)；ARM-v7 体系架构下是协处理器 CP15 寄存器 TTBR(Tranlation Table Base Register)；ARM-v8 体系架构下系统寄存器 TTBR(Tranlation Table Base Register)。"}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["在 Linux 内核中，分页后每个物理内存块通过 ",(0,n.jsx)(e.code,{children:"struct page"})," 描述，所有的",(0,n.jsx)(e.code,{children:"page"})," 会放到一个全局数组（mem_map）中，物理块号、页帧号等可以看成是该数组的下标，这两者可以通过内核函数 ",(0,n.jsx)(e.code,{children:"pfn_to_page"}),"/",(0,n.jsx)(e.code,{children:"page_to_pfn"})," 互相进行转换。"]}),"\n",(0,n.jsx)(e.h2,{id:"进程描述符",children:"进程描述符"}),"\n",(0,n.jsxs)(e.p,{children:["Linux 内核中，每一个进程的进程描述符（PCB）用 ",(0,n.jsx)(e.code,{children:"struct task_struct"})," 结构体表示，其中的 ",(0,n.jsx)(e.code,{children:"task_struct -> mm_struct"})," 是该进程的内存描述符，描述了该进程的内存使用情况，这包括进程内分段后的各部分（数据段、代码短、堆栈）的地址区间，虚拟内存的使用情况等。其中，",(0,n.jsx)(e.code,{children:"mm_struct"})," 中的变量 ",(0,n.jsx)(e.code,{children:"mmap"}),"/",(0,n.jsx)(e.code,{children:"mm_rb"}),"/",(0,n.jsx)(e.code,{children:"mmap_cache"})," 冗余的通过 ",(0,n.jsx)(e.code,{children:"struct vm_area_struct"})," 结构体记录了每一个和进程相关的内存区域。每个进程拥有多个 ",(0,n.jsx)(e.code,{children:"struct vm_area_struct"})," 数据，每个数据用来表示一段不同的连续虚拟内存区域，这包括："]}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsxs)(e.li,{children:["数据段（地址区间为 ",(0,n.jsx)(e.code,{children:"mm_struct->start_data"}),",",(0,n.jsx)(e.code,{children:"mm_struct->end_data"}),"）"]}),"\n",(0,n.jsxs)(e.li,{children:["栈空间（起始地址为 ",(0,n.jsx)(e.code,{children:"mm_struct->start_stack"}),"，结束地址动态分配）"]}),"\n",(0,n.jsxs)(e.li,{children:["代码段（地址区间为 ",(0,n.jsx)(e.code,{children:"mm_struct->start_code"}),",",(0,n.jsx)(e.code,{children:"mm_struct->end_code"}),"）"]}),"\n",(0,n.jsxs)(e.li,{children:["堆空间（地址区间为 ",(0,n.jsx)(e.code,{children:"mm_struct->start_brk"}),", ",(0,n.jsx)(e.code,{children:"mm_struct->brk"}),"，brk 可以通过系统调用 ",(0,n.jsx)(e.code,{children:"brk"})," 来动态扩展）"]}),"\n",(0,n.jsx)(e.li,{children:"共享空间"}),"\n",(0,n.jsx)(e.li,{children:"..."}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["上述的每一个区域，都由一个或多个 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 来描述，描述的内容包括地址、权限等，比如："]}),"\n",(0,n.jsx)(e.pre,{"data-language":"c","data-theme":"default",children:(0,n.jsxs)(e.code,{"data-language":"c","data-theme":"default",children:[(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// https://zhuanlan.zhihu.com/p/539591726"})}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// <mm_types.h>"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct {"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" mm_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_mm;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* 所属地址空间。 */"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_start;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* vm_mm内的起始地址。 */"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_end;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* 在vm_mm内结束地址之后的第一个字节的地址。 */"})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"　　/* 各进程的虚拟内存区域链表，按地址排序 */"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"vm_next;"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-constant)"},children:"pgprot_t"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_page_prot;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* 该虚拟内存区域的访问权限。 */"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_flags;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* 标志位 */"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" rb_node vm_rb;"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 省略了部份"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// ..."})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:" "}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"　　/* 用于处理该结构的各个函数指针。 */"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_operations_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_ops;"})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"　　/* 后备存储器的有关信息： */"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_pgoff;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* （vm_file内）的偏移量，单位是PAGE_SIZE，不是PAGE_CACHE_SIZE */"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" file "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_file;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* 映射到的文件（可能是NULL）。 */"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_private_data;"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:" /* vm_pte（即共享内存） */"})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"};"})})]})}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:"vm_area_struct->vm_ops"})," 指向了针对该 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 结构特有的操作，包括："]}),"\n",(0,n.jsx)(e.pre,{"data-language":"c","data-theme":"default",children:(0,n.jsxs)(e.code,{"data-language":"c","data-theme":"default",children:[(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// <mm.h>"})}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 不同版本可能不同"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_operations_struct {"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 指定内存区域加入到一个内存空间中"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:" ("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"open)"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" area);"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 指定区域从内存空间中删除"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:" ("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"close)"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" area);"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 物理页缺页时被（缺页中断服务程序）调用"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"　　"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:" ("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"fault)"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"vma"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_fault "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"vmf);"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 页面只读时被（缺页中断服务程序）调用"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"int"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:" ("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"page_mkwrite)"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" area"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_fault "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"vmf);"})]}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// ... 省略其他"})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"};"})})]})}),"\n",(0,n.jsxs)(e.p,{children:["同时，Linux 内核提供了多个内核函数来查找指定地址是否位于某个进程的 ",(0,n.jsx)(e.code,{children:"vm_area_struct"}),"，判定虚拟地址是否有效："]}),"\n",(0,n.jsx)(e.pre,{"data-language":"c","data-theme":"default",children:(0,n.jsxs)(e.code,{"data-language":"c","data-theme":"default",children:[(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 返回第一个大于 addr 的 vm_area_struct 结构，如果不存在返回 0"})}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// mm/mmap.c"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"find_vma"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" mm_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" mm"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" addr)"})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:" "}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 返回第一个小于 addr 的 vm_area_struct 结构，如果不存在返回 0"})}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// linux/mm.h -> mm/mmap.c"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"find_vma_prev"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" mm_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"mm"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" addr"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"**"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"pprev)"})]}),"\n",(0,n.jsx)(e.span,{className:"line",children:" "}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// 内联函数，返回第一个和start_addr/end_addr  区间相交的 vm_area_struct 结构"})}),"\n",(0,n.jsx)(e.span,{className:"line",children:(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-comment)"},children:"// #include<linux/mm.h>"})}),"\n",(0,n.jsxs)(e.span,{className:"line",children:[(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"static"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"inline"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" vm_area_struct "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-function)"},children:"find_vma_intersection"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" mm_struct"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" mm"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" start_addr"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"unsigned"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,n.jsx)(e.span,{style:{color:"var(--shiki-color-text)"},children:" end_addr)"})]})]})}),"\n",(0,n.jsxs)(e.p,{children:["一个进程有多个 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 和一个页表结构，需要区分这两者的作用："]}),"\n",(0,n.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,n.jsxs)(e.li,{children:["页表是描述了进程",(0,n.jsx)(e.strong,{children:"理论上"}),"可以获得的",(0,n.jsx)(e.strong,{children:"完整虚拟地址空间"}),"，如果进程理论上可以用的地址有 $2^20$ 个，那么页表项也有 $2^20$ 个（暂时不考虑多级页表）。"]}),"\n",(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:"vm_area_struct"})," 描述了进程实际上正在使用的虚拟地址，并没有覆盖全部的虚拟地址。"]}),"\n",(0,n.jsxs)(e.li,{children:["修改了 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 不一定会同时修改页表项，修改了页表项也不一定会同时修改 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})]}),"\n",(0,n.jsx)(e.li,{children:"MMU 通过一个进程的虚拟地址通过页基址和页号一定可以在内存中找到对应的页表项，但该页表项可能并没有分配相应的物理块号，或者操作不合法（只读页表项执行了写操作），此时，MMU 会发出缺页中断。"}),"\n",(0,n.jsxs)(e.li,{children:["此时内核会在中断服务程序中通过 ",(0,n.jsx)(e.code,{children:"find_vma"})," 函数查找虚拟地址对应的 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," ，如果查找到了有效的 ",(0,n.jsx)(e.code,{children:"vm_area_struct"}),"，则通过 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 中的 ",(0,n.jsx)(e.code,{children:"falut"})," 等特殊调用为该页表项或多个页表项分配或重新分配相应的物理块号；如果没有查找到有效的 ",(0,n.jsx)(e.code,{children:"vm_area_struct"}),"，则该虚拟地址无效，报 stack overflow 错误。"]}),"\n",(0,n.jsxs)(e.li,{className:"task-list-item",children:[(0,n.jsx)(e.input,{type:"checkbox",disabled:!0})," ","【确认下和 ",(0,n.jsx)(e.code,{children:"alloc_page"})," 函数的关系】"]}),"\n"]}),"\n",(0,n.jsxs)(e.blockquote,{children:["\n",(0,n.jsxs)(e.p,{children:["有效的 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 包括：地址空间位于某个 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 内或和某 ",(0,n.jsx)(e.code,{children:"vm_area_struct"})," 的边界地址差值不超过 K，后者一般用于栈空间"]}),"\n"]}),"\n",(0,n.jsx)(e.h2,{id:"懒加载",children:"懒加载"}),"\n",(0,n.jsx)(e.p,{children:"在进程对应的虚拟地址有效时，对应的页表项可能并没有分配物理块或没有分配合法的物理块。从节省内存的角度分析，可能是因为以下原因："}),"\n",(0,n.jsxs)(e.ul,{children:["\n",(0,n.jsx)(e.li,{children:"按需调页：在加载进程时，不将全部的进程加载进内存，而是根据进程的执行在需要时分配内存动态加载。"}),"\n",(0,n.jsx)(e.li,{children:"写时复制：进程 fork 时，子进程共享父进程的内存，仅在子进程对相应的内存有写操作时，才申请新的内存供子进程写。"}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["这些是典型的",(0,n.jsx)(e.strong,{children:"懒加载"}),"策略。这两个策略中，物理内存的动态分配体现在进程的页表项上，当按需调页或写时复制发生时，MMU 对相应的页表项的类型检查会失败，从而发出缺页中断，并在中断服务程序（",(0,n.jsx)(e.code,{children:"do_page_fault"}),"）中修改页表项。"]}),"\n",(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:"/images2022-11-18-09-27-28.png",alt:""})}),"\n",(0,n.jsx)(e.h2,{id:"反向寻址反向映射",children:"反向寻址（反向映射）"}),"\n",(0,n.jsxs)(e.p,{children:["反向寻址主要用于交换，需要在物理页换出（swap out）时将映射到该物理页的页表项逐一修改。可以参考",(0,n.jsx)(e.a,{href:"https://blog.csdn.net/faxiang1230/article/details/106609834",children:"这篇文章"}),"。"]})]})}r(3366),e.default=(0,l.j)({MDXContent:function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),s.components);return e?(0,n.jsx)(e,{...s,children:(0,n.jsx)(o,{...s})}):o(s)},pageOpts:{filePath:"pages/tutorial/operating-system/linux-kernel/0.md",route:"/tutorial/operating-system/linux-kernel/0",frontMatter:{authors:"sailist",date:"2022-11-23",description:"",draft:!1,title:"1.0.寻址"},headings:[{depth:1,value:"寻址",id:"寻址"},{depth:2,value:"页表",id:"页表"},{depth:3,value:"VA->PA",id:"va-pa"},{depth:2,value:"进程描述符",id:"进程描述符"},{depth:2,value:"懒加载",id:"懒加载"},{depth:2,value:"反向寻址（反向映射）",id:"反向寻址反向映射"}],title:"1.0.寻址"},pageNextRoute:"/tutorial/operating-system/linux-kernel/0"})}},function(s){s.O(0,[6828,9774,2888,179],function(){return s(s.s=2492)}),_N_E=s.O()}]);