(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4194],{8317:function(n,e,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/operating-system/9",function(){return i(4053)}])},4053:function(n,e,i){"use strict";i.r(e);var l=i(1527),s=i(6828),t=i(4579);function c(n){let e=Object.assign({h1:"h1",p:"p",img:"img",h2:"h2",ul:"ul",li:"li",strong:"strong",blockquote:"blockquote",a:"a",input:"input"},(0,t.ah)(),n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h1,{children:"进程管理"}),"\n",(0,l.jsx)(e.p,{children:"进程是操作系统分配资源的最小单位。静态的程序可以看做是一段机器指令（一串二进制序列），当程序通过操作系统加载进内存后，除了指令外，还会有该程序的状态（如页表）、申请的资源（内存、设备、文件）等。"}),"\n",(0,l.jsx)(e.p,{children:"线程是进程中的实际运行单位。进程内的每个线程共享该进程的内存（堆内存）、全局变量、文件描述符等资源，每个线程各自有各自的状态（如程序计数器）和空间（如栈空间）。"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.img,{src:"/images2022-10-20-11-57-29.png",alt:""})}),"\n",(0,l.jsx)(e.p,{children:"硬件对中断的支持，允许操作系统通过实现程序并发的执行（多道程序）。通过硬件内置的时钟计时器发出的定时中断，操作系统可以在某个 CPU 周期结束后，通过中断服务程序选择另外一个线程执行，这个过程叫做上下文切换。"}),"\n",(0,l.jsx)(e.p,{children:"因为每个线程有各自的程序计数器，因此说线程是操作系统调度的最小单位。在线程上下文切换时，如果两个线程所属的进程不相同，那么就会将进程的全部状态暂存，否则只需要将该线程所属的状态暂存。因此，单进程的多线程的上下文切换开销要小于多进程（自然也是多线程）的上下文切换开销。"}),"\n",(0,l.jsx)(e.h2,{id:"内核线程",children:"内核线程"}),"\n",(0,l.jsx)(e.p,{children:"上下文切换时，涉及到对当前线程状态的暂存，因此存在一些操作状态寄存器、程序计数器等位于内核内存空间数据的步骤，这些操作是由内核线程完成的。"}),"\n",(0,l.jsx)(e.p,{children:"? 线程的属性是状态和资源，这部分存在内存空间和寄存器上，所以切换寄存器就等于切换了一个线程，而某些状态寄存器标识了线程的权限，决定了该线程是内核线程还是用户线程，访问的是内核空间还是用户空间。"}),"\n",(0,l.jsx)(e.h2,{id:"抢占式调度--非抢占式调度",children:"抢占式调度 & 非抢占式调度"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"抢占式调度：进程在当前的指令周期结束结束后可能会因为各种原因被其他进程抢占。"}),"\n",(0,l.jsx)(e.li,{children:"非抢占式调度：如何分配当前要执行的进程不重要，但是分配的进程在结束之前不能被其他进程抢占很重要。"}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"调度指标",children:"调度指标*"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"CPU 使用率"}),"\n",(0,l.jsx)(e.li,{children:"吞吐量"}),"\n",(0,l.jsx)(e.li,{children:"周转时间"}),"\n",(0,l.jsx)(e.li,{children:"等待时间"}),"\n",(0,l.jsx)(e.li,{children:"响应时间"}),"\n"]}),"\n",(0,l.jsx)(e.h1,{children:"调度算法"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"先到先服务"}),"\n",(0,l.jsx)(e.li,{children:"最短作业优先调度"}),"\n",(0,l.jsx)(e.li,{children:"优先级调度"}),"\n",(0,l.jsx)(e.li,{children:"轮询"}),"\n",(0,l.jsx)(e.li,{children:"多级队列调度"}),"\n",(0,l.jsx)(e.li,{children:"..."}),"\n",(0,l.jsx)(e.li,{children:"多处理器调度"}),"\n",(0,l.jsx)(e.li,{children:"..."}),"\n"]}),"\n",(0,l.jsx)(e.h1,{children:"进程间通信"}),"\n",(0,l.jsx)(e.p,{children:"进程的用户地址空间各自独立。因此在进程间交换数据必须要通过内核。这一过程叫做进程间通信 IPC (InterProcess Communication)"}),"\n",(0,l.jsx)(e.p,{children:"目前进程间通信的方式主要有："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["管道：半双工（单向流动），通过一块内核缓冲区实现","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"匿名管道（pipe）：一般用于父进程和子进程之间单向消息传递"}),"\n",(0,l.jsx)(e.li,{children:"高级管道（Popen）"}),"\n",(0,l.jsx)(e.li,{children:"命名管道（FIFO）：可以用于非亲缘关系之间通话。名字存放在"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.li,{children:"信号（Signal）：异步方式发送，如 kill 等，属于软中断。程序中可以注册信号处理函数（否则使用默认的信号处理函数），即中断服务程序。信号处理函数执行时，会有进程的上下文切换（将原进程切换到中断服务程序）。"}),"\n",(0,l.jsx)(e.li,{children:"消息队列（message queue）：和管道类似，比管道在一些场景下更适合"}),"\n",(0,l.jsxs)(e.li,{children:["共享内存（shared memory）：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。",(0,l.jsx)(e.strong,{children:"共享内存是最快的 IPC 方式"}),"。一般配合信号量等机制使用。不同的进程拥有不同的虚拟内存地址，但都映射到相同的物理内存地址。","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"内存映射（mmap）"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.li,{children:"信号量（semaphore）：存储在内核中的一个变量，通常用于进程间同步或锁机制的实现。"}),"\n",(0,l.jsx)(e.li,{children:"套接字（网络通信）：一般用于网络通信。通过本地回环（127.0.0.1）也可以进行本地通信，但因为仍然需要封装抱头等网络协议的数据结构，所以本地的极限效率相对消息队列等要慢"}),"\n"]}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["经",(0,l.jsx)(e.a,{href:"https://blog.csdn.net/kingjo002/article/details/20036263",children:"云评测"}),"，在 socket 时长连接的情况下，消息队列大概比 socket 方式快 10% 左右"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"进程同步",children:"进程同步"}),"\n",(0,l.jsxs)(e.p,{children:["进程同步是进程间通信的一个常见场景。当进程和进程之间需要交换数据或者共同使用一块数据时，需要确保更改过程是",(0,l.jsx)(e.strong,{children:"原子化"}),"的，也就是任一进程操作时其他进程不能操作。操作的这一段过程被称作临界区，临界区问题是需要设计算法保证进程能够原子化的在临界区协作。"]}),"\n",(0,l.jsx)(e.p,{children:"进入区一般伴随着写锁的申请。"}),"\n",(0,l.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","线程安全的单例模式 ",(0,l.jsx)(e.a,{href:"https://www.cnblogs.com/xiaolincoding/p/11437231.html",children:"https://www.cnblogs.com/xiaolincoding/p/11437231.html"})]}),"\n"]}),"\n",(0,l.jsx)(e.h1,{children:"多处理器"}),"\n",(0,l.jsx)(e.h1,{children:"Reference"}),"\n",(0,l.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.a,{href:"https://cloud.tencent.com/developer/article/1897179",children:"https://cloud.tencent.com/developer/article/1897179"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,l.jsx)(e.a,{href:"https://www.cnblogs.com/alantu2018/p/8526916.html",children:"https://www.cnblogs.com/alantu2018/p/8526916.html"})]}),"\n"]}),"\n"]})]})}i(3366),e.default=(0,s.j)({MDXContent:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)},pageOpts:{filePath:"pages/tutorial/operating-system/9.md",route:"/tutorial/operating-system/9",frontMatter:{authors:"sailist",date:"2022-11-09",description:"",draft:!1,title:"4.进程管理"},headings:[{depth:1,value:"进程管理",id:"进程管理"},{depth:2,value:"内核线程",id:"内核线程"},{depth:2,value:"抢占式调度 & 非抢占式调度",id:"抢占式调度--非抢占式调度"},{depth:2,value:"调度指标*",id:"调度指标"},{depth:1,value:"调度算法",id:"调度算法"},{depth:1,value:"进程间通信",id:"进程间通信"},{depth:2,value:"进程同步",id:"进程同步"},{depth:1,value:"多处理器",id:"多处理器"},{depth:1,value:"Reference",id:"reference"}],title:"4.进程管理"},pageNextRoute:"/tutorial/operating-system/9"})}},function(n){n.O(0,[6828,9774,2888,179],function(){return n(n.s=8317)}),_N_E=n.O()}]);