(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6029],{4620:function(s,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/computer-network/6",function(){return e(9573)}])},9573:function(s,n,e){"use strict";e.r(n);var i=e(1527),l=e(6828),r=e(4579);function c(s){let n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",img:"img",blockquote:"blockquote",a:"a",strong:"strong",h3:"h3",pre:"pre",span:"span"},(0,r.ah)(),s.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"TCP 协议"}),"\n",(0,i.jsx)(n.p,{children:"TCP 是一种面向连接的数据流协议，位于传输层。面向连接指的是 A 和 B 之间的数据传输是稳定不会出错的，数据流表示数据可以被细粒度的拆分和组装（见下文 TCP 实例）。"}),"\n",(0,i.jsx)(n.h2,{id:"tcp-连接三次握手过程",children:"TCP 连接三次握手过程"}),"\n",(0,i.jsx)(n.p,{children:"TCP 建立连接的过程是让客户端和服务端都处于 Established（已建立）状态的过程，Established 表示该端确认了自身的接收和发送能力均正常（可以正常 IO）。建立连接的过程一共会产生三种报文，可以通过 SYN 位、ACK 位和 Seq 位（一个随机数）来区分。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["第一次握手，客户端发送 ",(0,i.jsx)(n.code,{children:"SYN=1，ACK=0，Seq=x"}),"，客户端发送后处于 SYN_SENT 状态，服务端接受后处于 SYN_RECV 状态，此时客户端无法确认 IO 能力，服务端无法完全确认自身的 IO 状态（只能知道服务端接收正常和客户端发送正常）。"]}),"\n",(0,i.jsxs)(n.li,{children:["第二次握手：服务端返回 ",(0,i.jsx)(n.code,{children:"SYN=1，ACK=x+1，Seq=y"}),"，服务端回复第一次请求，发送后服务端状态不变，客户端接收后处于 Established 状态，此时客户端能确认自身的 IO 状态正常。"]}),"\n",(0,i.jsxs)(n.li,{children:["第三次握手：客户端再发送 ",(0,i.jsx)(n.code,{children:"ACK=y+1，Seq=x+1"}),"，服务端接受后处于 Established 状态，此时服务端能确认自身的 IO 状态正常。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-10-06-12-13-32.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"真正的数据从第四个报文开始。"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["其实也可以直接在第三次握手中发送数据，但一般的封装库并不提供这种方式（没必要这么着急），详见",(0,i.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/373422503",children:"这篇文章"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"连接建立后，如果上层协议一直不发送数据，服务端可以通过可选的 KeepAlive 机制（发一个空报文给对方确保对方在线）进行检查。"}),"\n",(0,i.jsx)(n.h2,{id:"tcp-连接释放四次挥手过程",children:"TCP 连接释放四次挥手过程"}),"\n",(0,i.jsxs)(n.p,{children:["在结束连接时，双方",(0,i.jsx)(n.strong,{children:"逐步"}),"释放自己的读写功能。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["第一次挥手：客户端发送 ",(0,i.jsx)(n.code,{children:"FIN=1，ACK=1"}),"，表明客户端无数据要发送"]}),"\n",(0,i.jsxs)(n.li,{children:["第二次挥手：服务端发送 ",(0,i.jsx)(n.code,{children:"ACK=1"})]}),"\n",(0,i.jsxs)(n.li,{children:["第三次挥手：服务端二次发送 ",(0,i.jsx)(n.code,{children:"FIN=1，ACK=1"}),"，表明服务端无数据要发送，此时服务端确认双方都不需要读写，直接关闭连接。"]}),"\n",(0,i.jsxs)(n.li,{children:["第四次挥手：客户端二次发送 ",(0,i.jsx)(n.code,{children:"ACK=1"}),"，确认双方都不需要读写。在等待 2*MSL（最长报文段寿命）后，关闭连接"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-10-06-12-21-12.png",alt:""})}),"\n",(0,i.jsx)(n.h2,{id:"第四次挥手等待-2msl-的原因",children:"第四次挥手等待 2MSL 的原因"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"为了保证服务端能收到第四次挥手报文。如果第四次挥手报文一开始没有送达，那服务端会超时重传第三次挥手报文，第三次挥手+第四次挥手两个报文的最大存活时间是 2*MSL，因此客户端发送第四次挥手后需要等待这么长的时间，保证服务端能收到第四次挥手报文。"}),"\n",(0,i.jsx)(n.li,{children:"保证该连接的所有失效报文在网络中消失，避免后续连接造成影响。"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"第三次握手服务端没有收到的处理办法",children:"第三次握手服务端没有收到的处理办法"}),"\n",(0,i.jsx)(n.p,{children:"服务端超时重传自己的 SYN，直到收到客户端的 ACK 或者超过重试次数主动中断链接。"}),"\n",(0,i.jsxs)(n.p,{children:["客户端无法感知服务端没有收到（除非收到超时重传的 ",(0,i.jsx)(n.code,{children:"SYN+ACK"}),"），会直接发送数据，此时服务端会返回 RST 包告知客户端连接非法，请求重置。"]}),"\n",(0,i.jsx)(n.h2,{id:"握手只保留前两次可以吗",children:"握手只保留前两次可以吗？"}),"\n",(0,i.jsx)(n.p,{children:"只有一次握手：肯定不行，服务器不知道\n只有两次握手：不行。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"如果服务端不接收客户端的三次确认，而是对每一个连接请求直接建立连接，那么服务端就有可能对于一个长时间滞留已经失效连接请求建立无效连接。（来自谢希仁《第七版计算机网络》的解释）"}),"\n",(0,i.jsx)(n.li,{children:"TCP 报文中的确认号为 N 表明到序号 N-1 为止的所有数据都已经正确收到。只有两次握手的话，只有客户端的起始序列号能被确认，服务端选择的序列号则得不到确认（此时从服务端获取数据的过程就会停滞）。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"四次及以上握手没有必要（可以通过 KeepAlive 机制检查存活）"}),"\n",(0,i.jsx)(n.h2,{id:"keepalive-机制实现方案",children:"KeepAlive 机制实现方案"}),"\n",(0,i.jsx)(n.p,{children:"KeepAlive 机制具体由操作系统或者应用层实现。"}),"\n",(0,i.jsx)(n.h2,{id:"arq-滑动窗口协议和流量控制",children:"ARQ 滑动窗口协议和流量控制"}),"\n",(0,i.jsx)(n.p,{children:"可靠传输的实现必须依赖确认（Acknowledge，ACK），Ack 为接受到的包的 Seq+1，表明收到了该数据包，否则要么由接收方主动报告给发送方这一数据缺失，要么通过超时由发送方被动得知这一数据缺失。传输层通过这一确认/重传机制，在不可靠的传输网络上实现了可靠的通信。这一协议称为自动重传请求（Automatic Repeat reQuest，ARQ）。"}),"\n",(0,i.jsx)(n.p,{children:"为了保证信道利用率，允许发送方发送多个数据包，并延后接收 ACK 的时间，这就是连续 ARQ 协议（ARQ 滑动窗口协议）。其中滑动窗口用于限制发送方一次可以发送的字节数量。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-10-06-12-55-57.png",alt:""})}),"\n",(0,i.jsxs)(n.p,{children:["在滑动窗口中，接收方可以采用",(0,i.jsx)(n.strong,{children:"累积确认"}),"的方式确认发送方的数据。之前提到，",(0,i.jsx)(n.strong,{children:"TCP 报文中的确认号为 N 表明到序号 N-1 为止的所有数据都已经正确收到"}),"。累积确认即基于这一特点，只对按序到达的最后一个分组发送确认。"]}),"\n",(0,i.jsx)(n.p,{children:"在 TCP 协议报文的 header 上有一个 rwnd 字段，表明接收方设置发送方可发送数据报的字节数量（而不是报文段数量），用于连续 ARQ 协议的实现。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-10-06-12-50-10.png",alt:""})}),"\n",(0,i.jsx)(n.h3,{id:"零窗口探测",children:"零窗口探测"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"rwnd = 0"})," 时表示接收方禁止发送方发送数据，此时需要发送方设置一个持续计时器（persistence timer），在零窗口时候启动，定时确认此时接收方的窗口大小，从而避免互相等待产生死锁。"]}),"\n",(0,i.jsx)(n.h2,{id:"拥塞控制",children:"拥塞控制"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.rfc-editor.org/info/rfc5681",children:"RFC-5681"})," 定义了慢开始（slow-start）、拥塞避免（congestion avoidance）、快重传（fast retransmit）、快恢复（fast recover） 四种拥塞控制算法。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"慢开始（slow start）：从一个极低窗口值值开始增大窗口大小（此时窗口大小每次扩大一倍）"}),"\n",(0,i.jsx)(n.li,{children:"拥塞避免（congestion avoidance）：当窗口值超过某个阈值（ssthresh）时，从加倍（指数）增长改为线性增长，并在超时时将窗口大小重设为 1，ssthresh 设置为原来的一半，重新回到慢开始状态。这一过程也称为加法增大（Additive Increase）。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-10-06-12-40-22.png",alt:""})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"快重传&恢复（fast retransmit and recovery，FRR）：对于偶尔产生的丢包现象（而不是拥塞导致的丢包现象），客户端可以通过连续发送三个重复确认，此时 ssthresh 设置为原来的一半，并将窗口大小直接设置为当前的 ssthresh 大小。这一过程也称为乘法减小（Multiplicative Decrease）。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"加法增大（AI）和乘法减小（MD）合起来称为 AIMD 算法。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-10-06-12-45-09.png",alt:""})}),"\n",(0,i.jsx)(n.h2,{id:"总结-tcp-的可靠性来源",children:"总结 TCP 的可靠性来源"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"连接：通过三次握手和四次握手来确保连接的建立和释放"}),"\n",(0,i.jsx)(n.li,{children:"数据：通过带序确认和超时重传保证数据传递有序、不丢失、不重复，通过校验和保证不出错。"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"一个简单的-tcp-的传输示例",children:"一个简单的 TCP 的传输示例"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.liaoxuefeng.com/wiki/1016959663602400/1017788916649408",children:"https://www.liaoxuefeng.com/wiki/1016959663602400/1017788916649408"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["服务端（分监听端口",(0,i.jsx)(n.code,{children:"bind"}),"+",(0,i.jsx)(n.code,{children:"listen"}),"、接收并建立连接",(0,i.jsx)(n.code,{children:"accept"}),"以及之后的数据流 IO 过程）"]}),"\n",(0,i.jsxs)(n.p,{children:["客户端（包括 ",(0,i.jsx)(n.code,{children:"connect"}),"和数据流的 IO 过程）"]}),"\n",(0,i.jsx)(n.h1,{children:"UDP"}),"\n",(0,i.jsx)(n.p,{children:"UDP（User Datagram Protocol，用户数据报协议）是一种传输层协议。"}),"\n",(0,i.jsx)(n.p,{children:"UDP 为网络层以上和应用层以下提供了一个简单的接口。UDP 只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以 UDP 有时候也被认为是不可靠的数据包协议）。UDP 在 IP 数据包的头部仅仅加入了复用和数据校验字段。"}),"\n",(0,i.jsx)(n.h2,{id:"一个简单的-udp-的传输示例",children:"一个简单的 UDP 的传输示例"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.liaoxuefeng.com/wiki/1016959663602400/1017790181885952",children:"https://www.liaoxuefeng.com/wiki/1016959663602400/1017790181885952"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"服务端监听端口（不需要 connect、listen）"}),"\n",(0,i.jsx)(n.pre,{"data-language":"python","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"python","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"s "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" socket"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"socket"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"(socket.AF_INET, socket.SOCK_DGRAM)"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# 绑定端口:"})}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"bind"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"(("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'127.0.0.1'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:", "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"9999"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"))"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:" "}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"print"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Bind UDP on 9999...'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:")"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"while"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"True"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# 接收数据:"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    data"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" addr "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"recvfrom"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"1024"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:")"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"print"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Received from "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"%s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:":"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"%s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:".'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"%"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:" addr)"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"sendto"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"b"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Hello, "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"%s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"!'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"%"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:" data, addr)"})]})]})}),"\n",(0,i.jsx)(n.p,{children:"客户端发送数据，接受返回值（不需要 connect）"}),"\n",(0,i.jsx)(n.pre,{"data-language":"python","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"python","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"s "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" socket"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"socket"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"(socket.AF_INET, socket.SOCK_DGRAM)"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"for"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" data "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"in"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" ["}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"b"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Michael'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"b"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Tracy'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"b"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'Sarah'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"]"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# 发送数据:"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"sendto"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"(data, ("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'127.0.0.1'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:", "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"9999"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"))"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# 接收数据:"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"print"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"(s."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"recv"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"1024"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:")."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"decode"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"("}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"'utf-8'"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"))"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"s"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"close"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"()"})]})]})}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Bind UDP on 9999...                                     │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Received from 127.0.0.1:63823...                        │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Received from 127.0.0.1:63823...                        │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Received from 127.0.0.1:63823..."})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Hello, Michael!                                         │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Hello, Tracy!                                           │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Hello, Sarah!                                           │"})})]})}),"\n",(0,i.jsxs)(n.p,{children:["如果将服务端的",(0,i.jsx)(n.code,{children:"data, addr = s.recvfrom(1024)"}),"接收的字节数从 1024 改为 2，那么最后客户端的输出会变成"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Hello, Mi!                                           │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Hello, Tr!                                           │"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"│Hello, Sa!                                           │"})})]})}),"\n",(0,i.jsxs)(n.p,{children:["这是 UDP 作为面向无连接的",(0,i.jsx)(n.strong,{children:"数据报"}),"协议的表现。每一个报文是一个整体，没有办法拆分到下一次接收。"]}),"\n",(0,i.jsx)(n.h1,{children:"TCP 和 UDP 的异同点"}),"\n",(0,i.jsx)(n.p,{children:"TCP 提供面向连接的可靠传输，UDP 提供面向无连接的不可靠传输"}),"\n",(0,i.jsx)(n.p,{children:"TCP 是流模式，发送的数据不需要一次性读完，UDP 是数据报模式，服务端 write 和客户端 read 的次数必须相同。"})]})}e(3366),n.default=(0,l.j)({MDXContent:function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),s.components);return n?(0,i.jsx)(n,{...s,children:(0,i.jsx)(c,{...s})}):c(s)},pageOpts:{filePath:"pages/tutorial/computer-network/6.md",route:"/tutorial/computer-network/6",frontMatter:{authors:"sailist",date:"2022-11-06",description:"",draft:!1,title:"3.传输层"},headings:[{depth:1,value:"TCP 协议",id:"tcp-协议"},{depth:2,value:"TCP 连接三次握手过程",id:"tcp-连接三次握手过程"},{depth:2,value:"TCP 连接释放四次挥手过程",id:"tcp-连接释放四次挥手过程"},{depth:2,value:"第四次挥手等待 2MSL 的原因",id:"第四次挥手等待-2msl-的原因"},{depth:2,value:"第三次握手服务端没有收到的处理办法",id:"第三次握手服务端没有收到的处理办法"},{depth:2,value:"握手只保留前两次可以吗？",id:"握手只保留前两次可以吗"},{depth:2,value:"KeepAlive 机制实现方案",id:"keepalive-机制实现方案"},{depth:2,value:"ARQ 滑动窗口协议和流量控制",id:"arq-滑动窗口协议和流量控制"},{depth:3,value:"零窗口探测",id:"零窗口探测"},{depth:2,value:"拥塞控制",id:"拥塞控制"},{depth:2,value:"总结 TCP 的可靠性来源",id:"总结-tcp-的可靠性来源"},{depth:2,value:"一个简单的 TCP 的传输示例",id:"一个简单的-tcp-的传输示例"},{depth:1,value:"UDP",id:"udp"},{depth:2,value:"一个简单的 UDP 的传输示例",id:"一个简单的-udp-的传输示例"},{depth:1,value:"TCP 和 UDP 的异同点",id:"tcp-和-udp-的异同点"}],title:"3.传输层"},pageNextRoute:"/tutorial/computer-network/6"})}},function(s){s.O(0,[6828,9774,2888,179],function(){return s(s.s=4620)}),_N_E=s.O()}]);