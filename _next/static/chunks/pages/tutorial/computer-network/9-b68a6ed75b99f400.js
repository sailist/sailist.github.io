(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9283],{6876:function(e,n,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/computer-network/9",function(){return l(1336)}])},1336:function(e,n,l){"use strict";l.r(n);var i=l(1527),s=l(6828),r=l(4579);function d(e){let n=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",h2:"h2",h3:"h3",code:"code",blockquote:"blockquote",a:"a",pre:"pre",span:"span",img:"img"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"HTTP 协议"}),"\n",(0,i.jsx)(n.p,{children:"HTTP 是一种应用层协议。约定了一种服务器和客户端之间交换数据的方式，这包括两种消息类型，均由采用 ASCII 编码的多行文本构成︰"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"请求（requests）：客户端发送用来触发一个服务器上的动作"}),"\n",(0,i.jsx)(n.li,{children:"响应（responses）：来自服务器的应答。"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"消息结构",children:"消息结构"}),"\n",(0,i.jsx)(n.p,{children:"HTTP 请求默认使用 80 端口。"}),"\n",(0,i.jsx)(n.p,{children:"请求和相应内容分为 header 和 body 两个部分，header 是必须的，body 是可选的（一般见于 put、post 请求中）。header 描述元信息，body 存放具体数据。"}),"\n",(0,i.jsx)(n.p,{children:"HTTP 请求和响应具有相似的结构，由以下部分组成︰"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"起始行：一行起始行用于描述要执行的请求，或者是对应的状态，成功或失败。这个起始行总是单行的。"}),"\n",(0,i.jsx)(n.li,{children:"headers：一个可选的 HTTP 头集合指明请求或描述消息正文。"}),"\n",(0,i.jsx)(n.li,{children:"empty line：一个空行指示所有关于请求的元数据已经发送完毕。"}),"\n",(0,i.jsx)(n.li,{children:"body：一个可选的包含请求相关数据的正文 (比如 HTML 表单内容), 或者响应相关的文档。正文的大小有起始行的 HTTP 头来指定。"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"request",children:"request"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["起始行：由方法（共八种）、目标、版本三部分组成，如：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"POST / HTTP/1.1"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"GET www.baidu.com HTTP/1.1"})}),"\n",(0,i.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["headers：不区分大小写的字符串，紧跟着的冒号 (':') 和一个结构取决于 header 的值。整个 header（包括值）由一行组成，这一行可以相当长，如","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Host: localhost:8080"}),"\n",(0,i.jsx)(n.li,{children:"Connection: keep-alive"}),"\n",(0,i.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["body（optional）","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single-resource bodies，由一个单文件组成。该类型 body 由两个 header 定义： Content-Type 和 Content-Length."}),"\n",(0,i.jsx)(n.li,{children:"Multiple-resource bodies，由多部分 body 组成，每一部分包含不同的信息位。通常是和 HTML Forms 连系在一起。\nHTTP 协议（HyperText Transfer Protocol, 超文本传输协议）中定义了八种动作/方法，Get 和 Post 是其中的两种。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"response",children:"response"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["起始行（状态行，status line）：由版本，状态码，状态文本组成，如：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"HTTP/1.1 404 Not Found"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Headers","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"General headers，例如 Via，适用于整个报文。"}),"\n",(0,i.jsx)(n.li,{children:"Response headers，例如 Vary 和 Accept-Ranges，提供其它不符合状态行的关于服务器的信息。"}),"\n",(0,i.jsx)(n.li,{children:"Entity headers，例如 Content-Length，适用于请求的 body。显然，如果请求中没有任何 body，则不会发送这样的头文件。"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Body","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single-resource bodies，由已知长度的单个文件组成。该类型 body 由两个 header 定义：Content-Type 和 Content-Length。"}),"\n",(0,i.jsx)(n.li,{children:"Single-resource bodies，由未知长度的单个文件组成，通过将 Transfer-Encoding 设置为 chunked 来使用 chunks 编码。"}),"\n",(0,i.jsx)(n.li,{children:"Multiple-resource bodies，由多部分 body 组成，每部分包含不同的信息段。但这是比较少见的。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"http-传输方向单双公",children:"HTTP 传输方向（单双公）"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.jianshu.com/p/3ca180af7dca",children:"https://www.jianshu.com/p/3ca180af7dca"})}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"单工： 数据传输只允许在一个方向上的传输，只能一方来发送数据，另一方来接收数据并发送。例如：对讲机"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"半双工：数据传输允许两个方向上的传输，但是同一时间内，只可以有一方发送或接受消息。例如：打电话"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"全双工：同时可进行双向传输。例如：websocket"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"http1.0：单工。因为是短连接，客户端发起请求之后，服务端处理完请求并收到客户端的响应后即断开连接。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"http1.1：半双工。默认开启长连接 keep-alive，开启一个连接可发送多个请求。"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"http2.0：全双工，允许服务端主动向客户端发送数据。"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"http-不同版本的主要区别",children:"HTTP 不同版本的主要区别"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"HTTP/0.9：只接受 GET 一种请求方法，不支持请求头"}),"\n",(0,i.jsx)(n.li,{children:"HTTP/1.0："}),"\n",(0,i.jsxs)(n.li,{children:["HTTP/1.1：默认采用持续链接，和 1.0 的主要区别在于：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"缓存处理"}),"\n",(0,i.jsx)(n.li,{children:"缓存处理"}),"\n",(0,i.jsx)(n.li,{children:"带宽优化及网络连接的使用"}),"\n",(0,i.jsx)(n.li,{children:"错误通知的管理"}),"\n",(0,i.jsx)(n.li,{children:"消息在网络中的发送"}),"\n",(0,i.jsx)(n.li,{children:"互联网地址的维护"}),"\n",(0,i.jsx)(n.li,{children:"安全性及完整性"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"http-相应状态码",children:"HTTP 相应状态码"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"信息响应 (100–199)：消息——请求已被服务器接收，继续处理"}),"\n",(0,i.jsx)(n.li,{children:"成功响应 (200–299)：成功——请求已成功被服务器接收、理解、并接受"}),"\n",(0,i.jsx)(n.li,{children:"重定向消息 (300–399)：重定向——需要后续操作才能完成这一请求"}),"\n",(0,i.jsx)(n.li,{children:"客户端错误响应 (400–499)：请求错误——请求含有词法错误或者无法被执行"}),"\n",(0,i.jsx)(n.li,{children:"服务端错误响应 (500–599)：服务器错误——服务器在处理某个正确请求时发生错误，如 500"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3xx-状态码",children:"3xx 状态码"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"301 Move Permanently，是永久重定向，表示资源被永久的改变了位置。这建议请求方应该缓存该响应。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"一个 301 响应内容的示例："}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"HTTP / 1.1  301  Moved Permanently"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"Location :  http://www.example.org/index.asp"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"Cache-control :  private; max-age=600"})})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"302 Found/Moved Temporarily，是临时重定向。"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"返回 301 状态码是将网站位址由 HTTP 迁移到 HTTPS 的最佳方法。"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"303 See Other。建议用于 Post 请求后对用户当前页面的跳转。"}),"\n",(0,i.jsx)(n.li,{children:"307 Temporary Redirect，基于 302 的改变，建议用户用同样的请求类型请求重定向网址。"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4xx-状态码",children:"4xx 状态码"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"400 ：客户端请求有语法错误，不能被服务器所理解。"}),"\n",(0,i.jsx)(n.li,{children:"403 ：服务器收到请求，但是拒绝提供服务。"}),"\n",(0,i.jsx)(n.li,{children:"404 Not Found。服务器找不到请求的网页。"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"get-和-post-的异同",children:"Get 和 Post 的异同"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"从语义上，Get 一般用于请求数据，Post 用于新增或修改数据"}),"\n",(0,i.jsx)(n.li,{children:"从形式上，Get 参数显式，内容可以被浏览器缓存，Post 参数隐式，不可被缓存。"}),"\n",(0,i.jsx)(n.li,{children:"从数据上，Get 参数只能是 url，Post 可以支持各种格式的数据。"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{children:"HTTP/2"}),"\n",(0,i.jsx)(n.p,{children:"HTTP/1.x 报文有一些性能上的缺点："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Header 不像 body，它不会被压缩。"}),"\n",(0,i.jsx)(n.li,{children:"两个报文之间的 header 通常非常相似，但它们仍然在连接中重复传输。"}),"\n",(0,i.jsx)(n.li,{children:"无法复用。当在同一个服务器打开几个连接时：TCP 热连接比冷连接更加有效。"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"HTTP/2 引入了一个额外的步骤：它将 HTTP/1.x 消息分成帧并嵌入到流 (stream) 中。数据帧和报头帧分离，这将允许报头压缩。将多个流组合，这是一个被称为 多路复用 (multiplexing) 的过程，它允许更有效的底层 TCP 连接。"}),"\n",(0,i.jsx)(n.p,{children:"HTTP/2 是一个在 HTTP/1.1 和底层传输协议之间附加的步骤。Web 开发人员不需要在其使用的 API 中做任何更改来利用 HTTP 帧；当浏览器和服务器都可用时，HTTP/2 将被打开并使用。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"/images2022-12-06-09-54-30.png",alt:""})}),"\n",(0,i.jsx)(n.h1,{children:"HTTPS 协议"}),"\n",(0,i.jsx)(n.p,{children:"超文本传输安全协议，HyperText Transfer Protocol Secure。"}),"\n",(0,i.jsx)(n.p,{children:"HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。用于提供对网站服务器的身份认真，保护交换资料的隐私与完整性。"}),"\n",(0,i.jsx)(n.p,{children:"HTTPS 请求默认使用 443 端口。"}),"\n",(0,i.jsx)(n.h2,{id:"技术实现",children:"技术实现"}),"\n",(0,i.jsx)(n.p,{children:"HTTPS 请求会基于 SSL/TLS 安全协议加密 HTTP 请求。具体的，安全协议作为 HTTP 进程和运输层的中间层，向上（HTTP 进程）提供 socket 或解密后的报文，向下注入运输层加密报文或从运输层获取加密报文并解密。"}),"\n",(0,i.jsx)(n.h1,{children:"Reference"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP",children:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP"})}),"\n"]})]})}l(3366),n.default=(0,s.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)},pageOpts:{filePath:"pages/tutorial/computer-network/9.md",route:"/tutorial/computer-network/9",frontMatter:{authors:"sailist",date:"2022-12-06",description:"",draft:!1,title:"4.3.HTTP协议"},headings:[{depth:1,value:"HTTP 协议",id:"http-协议"},{depth:2,value:"消息结构",id:"消息结构"},{depth:3,value:"request",id:"request"},{depth:3,value:"response",id:"response"},{depth:2,value:"HTTP 传输方向（单双公）",id:"http-传输方向单双公"},{depth:2,value:"HTTP 不同版本的主要区别",id:"http-不同版本的主要区别"},{depth:2,value:"HTTP 相应状态码",id:"http-相应状态码"},{depth:3,value:"3xx 状态码",id:"3xx-状态码"},{depth:2,value:"4xx 状态码",id:"4xx-状态码"},{depth:2,value:"Get 和 Post 的异同",id:"get-和-post-的异同"},{depth:1,value:"HTTP/2",id:"http2"},{depth:1,value:"HTTPS 协议",id:"https-协议"},{depth:2,value:"技术实现",id:"技术实现"},{depth:1,value:"Reference",id:"reference"}],title:"4.3.HTTP协议"},pageNextRoute:"/tutorial/computer-network/9"})}},function(e){e.O(0,[6828,9774,2888,179],function(){return e(e.s=6876)}),_N_E=e.O()}]);