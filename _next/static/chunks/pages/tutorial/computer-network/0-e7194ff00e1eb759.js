(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6201],{2670:function(n,i,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/computer-network/0",function(){return l(8139)}])},8139:function(n,i,l){"use strict";l.r(i);var e=l(1527),r=l(6828),t=l(4579);function s(n){let i=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",h2:"h2",a:"a"},(0,t.ah)(),n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(i.h1,{children:"TCP/IP 四层协议"}),"\n",(0,e.jsx)(i.p,{children:"TCP/IP 协议是事实上的传输协议标准。自顶向下分为应用层、传输层、网络层和数据链路层，每一层有不同的功能和协议。"}),"\n",(0,e.jsx)(i.p,{children:"各个层可以看成是由小到大，由局部到完整的定义了一个物流系统。"}),"\n",(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsxs)(i.li,{children:["链路层可以再分为物理层和数据链路层。","\n",(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsx)(i.li,{children:"物理层向同层的设备建立物理连接、发送和接收模拟信号并转换为数字信号，向上传递给数据链路层；接受数据链路层的帧数据，按比特转换为模拟信号传递给目标物理层设备。（这一步是广播还是单播？）"}),"\n",(0,e.jsx)(i.li,{children:"数据链路层由上到下接受网络层的数据，装帧后传递给下层的物理层；接收来自物理层的数字信号，成帧、校验后解帧传递给上层网络层。"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(i.li,{children:["网络层由上到下通过 IP 协议、ARP 协议获得目标设备的 MAC 地址，通过路由协议选择合适的路径写入链路层；由下到上接收链路层的数据，封包后传递给上层的传输层。","\n",(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsx)(i.li,{children:"IP 协议：定义逻辑地址（Ip 地址）"}),"\n",(0,e.jsx)(i.li,{children:"ARP 协议：通过 IP 地址获取 Mac 地址"}),"\n",(0,e.jsx)(i.li,{children:"路由协议：选择合适的路径转发数据包"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(i.li,{children:["传输层由上到下将 UDP 协议和 TCP 协议中定义的数据格式写入到网络层；由下到上接收网络层的数据，组成 UDP 和 TCP 协议封包的格式，并通过预先标识好的端口传递给上层的应用层（具体的应用程序）。","\n",(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsx)(i.li,{children:"TCP 协议：面向连接的数据流协议"}),"\n",(0,e.jsx)(i.li,{children:"UDP 协议：面向无连接的数据包协议"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(i.li,{children:["应用层定义数据格式、目标机器和目标端口，由上到下写入传输层；绑定监听端口，由下到上接受来自传输层的协议封包并解包为应用层需要的数据格式。常见数据格式和传输协议的包括","\n",(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsx)(i.li,{children:"HTTP 协议：超文本传输协议"}),"\n",(0,e.jsx)(i.li,{children:"DNS 协议：负责域名解析"}),"\n",(0,e.jsx)(i.li,{children:"FTP 协议"}),"\n",(0,e.jsx)(i.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(i.h2,{id:"数据封装",children:"数据封装"}),"\n",(0,e.jsx)(i.h1,{children:"OSI 七层模型"}),"\n",(0,e.jsxs)(i.ul,{children:["\n",(0,e.jsx)(i.li,{children:"物理层"}),"\n",(0,e.jsx)(i.li,{children:"数据链路层"}),"\n",(0,e.jsx)(i.li,{children:"网络层"}),"\n",(0,e.jsx)(i.li,{children:"传输层"}),"\n",(0,e.jsx)(i.li,{children:"会话层"}),"\n",(0,e.jsx)(i.li,{children:"表示层"}),"\n",(0,e.jsx)(i.li,{children:"应用层"}),"\n"]}),"\n",(0,e.jsx)(i.p,{children:(0,e.jsx)(i.a,{href:"http://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/",children:"http://arthurchiao.art/blog/rfc1180-a-tcp-ip-tutorial-zh/"})})]})}l(3366),i.default=(0,r.j)({MDXContent:function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}=Object.assign({},(0,t.ah)(),n.components);return i?(0,e.jsx)(i,{...n,children:(0,e.jsx)(s,{...n})}):s(n)},pageOpts:{filePath:"pages/tutorial/computer-network/0.md",route:"/tutorial/computer-network/0",frontMatter:{authors:"sailist",date:"2022-10-17",description:"",draft:!1,title:"0.总述"},headings:[{depth:1,value:"TCP/IP 四层协议",id:"tcpip-四层协议"},{depth:2,value:"数据封装",id:"数据封装"},{depth:1,value:"OSI 七层模型",id:"osi-七层模型"}],title:"0.总述"},pageNextRoute:"/tutorial/computer-network/0"})}},function(n){n.O(0,[6828,9774,2888,179],function(){return n(n.s=2670)}),_N_E=n.O()}]);